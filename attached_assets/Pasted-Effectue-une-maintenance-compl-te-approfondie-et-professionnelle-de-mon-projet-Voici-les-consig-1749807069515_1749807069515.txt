Effectue une maintenance complète, approfondie et professionnelle de mon projet.

Voici les consignes globales :

🔧 1. 🔍 Nettoyage de code :
- Supprime tout code mort, inutilisé ou dupliqué (variables, imports, composants, fonctions).
- Identifie et corrige toutes les variables non déclarées ou non définies.
- Élimine tous les blocs de données simulées (mock/fake/demo data) et remplace-les par des appels réels vers mes routes API (dans `/app/api/`).

🌐 2. 📡 Connexion aux données :
- Pour chaque composant ou page utilisant des données simulées, remplace-les par des appels `fetch('/api/...')` ou `getServerSideProps()`/`getStaticProps()` si côté serveur.
- Si une route API n’existe pas encore, indique clairement qu’il faut la créer.
- Corrige les appels API mal structurés ou non typés.

🧱 3. 🎯 Structure & architecture :
- Vérifie la structure des fichiers, dossiers et composants (components, layout, pages, api, etc.).
- Déplace les composants mal placés dans un dossier logique (`components/ui`, `components/layout`, etc.).
- Propose une structure propre et évolutive si nécessaire.

🧠 4. 📦 Optimisation des performances :
- Identifie les composants lourds ou inutiles à recharger.
- Ajoute `React.memo`, `useMemo`, `useCallback` si pertinent.
- Réduit le nombre de re-renders inutiles.
- Optimise les chargements conditionnels ou dynamiques (`import()`).

🧹 5. ✨ Qualité du code :
- Applique les bonnes pratiques React/Next.js.
- Corrige les erreurs ESLint/TypeScript.
- Propose l'ajout de types si absents.
- Uniformise la convention de nommage (`camelCase`, `PascalCase`, etc.).
- Ajoute des commentaires et une documentation sommaire si utile.

🔐 6. 🛡️ Sécurité et robustesse :
- Assure-toi que toutes les entrées utilisateurs sont bien validées côté client et côté serveur.
- Vérifie que les requêtes API sont protégées (auth, vérifications de rôle/permission, etc.).
- Protège les routes sensibles (admin, actions critiques).

🧪 7. ✅ Tests (si applicable) :
- Vérifie la présence de tests unitaires et d’intégration.
- Propose des cas de test à ajouter s’il en manque.
- Suggère des outils comme Jest, React Testing Library, Cypress.

🧭 8. 📁 Environnement et configuration :
- Vérifie les fichiers `.env`, `next.config.js`, `tsconfig.json`, `package.json`.
- Supprime les dépendances inutiles, mets à jour celles obsolètes.
- Assure-toi que l’environnement est prêt pour la production (ex: variables sensibles masquées, build fonctionnel).

⚙️ 9. 🔄 Recommandations générales :
- Propose une checklist de choses à corriger, améliorer, ou documenter.
- Priorise les tâches critiques par ordre d’urgence.

➡️ Objectif : que tout le projet soit propre, optimisé, bien typé, sécurisé, évolutif et 100% connecté à une base de données réelle via API.
